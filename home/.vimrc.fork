" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"   Customizations on top of spf13 vim
" }

" Formatting {
    " Long line wrapping rulez, add it back
    set wrap
    set showbreak=â†ª

    " tabstob should be 8 generally because it is the assumed default
    set ts=8

    " Less identation for the following file types
    autocmd FileType xml,htmlcheetah,tex,markdown,docbk,xsd,xslt setlocal shiftwidth=2 softtabstop=2
    " Force md files to be recognized as markdown instead of modula files
    au BufRead,BufNewFile *.md set filetype=markdown
" }

" Diffing {
    " Wrapping also for diffs (copies the wrap setting)
    autocmd FilterWritePre * if &diff | setlocal wrap< | endif

    " Ignore whitespaces and tab differences when diffing and use vertical splits
    set diffopt+=iwhite,vertical
    " options are:
    " -w : ignore all white space
    " -B : ignore changes whose lines are all blank
    " --strip-trailing-cr : strip trailing carriage return on input
    " -d : try hard to find a smaller set of changes
    set diffexpr=MyDiff()
    " Empower iwhite option to ignore all white space and blank lines
    function MyDiff()
        let opt = ""
        if &diffopt =~ "icase"
            let opt = opt . "-i "
        endif
        if &diffopt =~ "iwhite"
            let opt = opt . "-w -B "
        endif
        silent execute "!diff -a --binary " . opt . v:fname_in . " " . v:fname_new .
                    \  " > " . v:fname_out
    endfunction
" }

" Vim UI {

    "highlight column 80
    set colorcolumn=80

    " Ruler color fix
    set background=dark

    if has('gui_running')
        " Use Inconsolata font in gvim. In vim is the term font
        set guifont=Inconsolata\ 12
    endif

    " Indent Guides colors
    if isdirectory(expand("~/.vim/bundle/vim-indent-guides/"))
        let g:indent_guides_auto_colors = 0

        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#586e75 ctermbg=240
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#839496 ctermbg=244
    endif
" }

" Bundles config {
    " pylint: trailing spaces are already notified by vim
    if isdirectory(expand("~/.vim/bundle/python-mode/"))
        let g:pymode_lint_ignore = "C0303,E501"
    endif

    " syntastic
    " do not run syntastic checks when quitting
    let g:syntastic_check_on_wq = 0

    " Airline stuff. note that:
        "" Enable powerline symbols
        "let g:airline_powerline_fonts = 1
    " Is already set in .vimrc.before.fork
    if isdirectory(expand("~/.vim/bundle/vim-airline/"))
        set noshowmode
        " display buffers list
        let g:airline#extensions#tabline#enabled = 1
        " Do not use the hunks (+0 ~0 -0 stuff in the branch indicator)
        let g:airline#extensions#hunks#enabled = 0
        " Use hair space to separate ariline symbols to avoid garbage in gvim
        if !exists('g:airline_symbols')
            let g:airline_symbols = {}
        endif
        let g:airline_symbols.space = "\ua0"
    endif
    " rainbow parenthesis colorization, disabled by default but keeping it
    " since it is useful when reading horrible source code
    if isdirectory(expand("~/.vim/bundle/rainbow/"))
        " disable it by default
        let g:rainbow_active = 0
        " add a key to toggle it
        nmap <silent> <leader>] :RainbowToggle<CR>
        " SOLARIZED HEX     16/8 TERMCOL  XTERM/HEX   L*A*B      sRGB        HSB
        " --------- ------- ---- -------  ----------- ---------- ----------- -----------
        " base03    #002b36  8/4 brblack  234 #1c1c1c 15 -12 -12   0  43  54 193 100  21
        " base02    #073642  0/4 black    235 #262626 20 -12 -12   7  54  66 192  90  26
        " base01    #586e75 10/7 brgreen  240 #4e4e4e 45 -07 -07  88 110 117 194  25  46
        " base00    #657b83 11/7 bryellow 241 #585858 50 -07 -07 101 123 131 195  23  51
        " base0     #839496 12/6 brblue   244 #808080 60 -06 -03 131 148 150 186  13  59
        " base1     #93a1a1 14/4 brcyan   245 #8a8a8a 65 -05 -02 147 161 161 180   9  63
        " base2     #eee8d5  7/7 white    254 #d7d7af 92 -00  10 238 232 213  44  11  93
        " base3     #fdf6e3 15/7 brwhite  230 #ffffd7 97  00  10 253 246 227  44  10  99
        " yellow    #b58900  3/3 yellow   136 #af8700 60  10  65 181 137   0  45 100  71
        " orange    #cb4b16  9/3 brred    166 #d75f00 50  50  55 203  75  22  18  89  80
        " red       #dc322f  1/1 red      160 #d70000 50  65  45 220  50  47   1  79  86
        " magenta   #d33682  5/5 magenta  125 #af005f 50  65 -05 211  54 130 331  74  83
        " violet    #6c71c4 13/5 brmagenta 61 #5f5faf 50  15 -45 108 113 196 237  45  77
        " blue      #268bd2  4/4 blue      33 #0087ff 55 -10 -45  38 139 210 205  82  82
        " cyan      #2aa198  6/6 cyan      37 #00afaf 60 -35 -05  42 161 152 175  74  63
        " green     #859900  2/2 green     64 #5f8700 60 -20  65 133 153   0  68 100  60
        let g:rainbow_conf = {
        \   'guifgs': ['#268bd2', '#2aa198', '#6c71c4', '#d33682'],
        \   'ctermfgs': ['33', '37', '61', '125']
        \}
    endif
    if has('nvim')
        if isdirectory(expand("~/.vim/bundle/deoplete.nvim/"))
            " deoplete.vim
            let g:deoplete#enable_at_startup = 1

            set completeopt+=noinsert

            " <TAB>: completion.
            imap <silent><expr> <TAB>
                  \ pumvisible() ? "\<C-n>" :
                  \ <SID>check_back_space() ? "\<TAB>" :
                  \ deoplete#mappings#manual_complete()
            function! s:check_back_space() abort "{{{
              let col = col('.') - 1
              return !col || getline('.')[col - 1]  =~ '\s'
            endfunction"}}}

            " <S-TAB>: completion back.
            inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

            " <C-h>, <BS>: close popup and delete backword char.
            inoremap <expr><C-h> deolete#mappings#smart_close_popup()."\<C-h>"
            inoremap <expr><BS> deoplete#mappings#smart_close_popup()."\<C-h>"

            inoremap <expr><C-g> deoplete#mappings#undo_completion()
            " <C-l>: redraw candidates
            inoremap <C-l>       a<BS>

            " <CR>: close popup and save indent.
            inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
            function! s:my_cr_function() abort
              return deoplete#mappings#close_popup() . "\<CR>"
            endfunction

            inoremap <expr> '  pumvisible() ? deoplete#mappings#close_popup() : "'"

            " Use head matcher
            " call deoplete#custom#set('_', 'matchers', ['matcher_head'])

            " Use auto delimiter
            call deoplete#custom#set('_', 'converters',
                  \ ['converter_auto_paren',
                  \  'converter_auto_delimiter', 'remove_overlap'])

            " call deoplete#custom#set('buffer', 'min_pattern_length', 9999)

            let g:deoplete#keyword_patterns = {}
            let g:deoplete#keyword_patterns._ = '[a-zA-Z_]\k*\(?'
            " let g:deoplete#keyword_patterns.tex = '\\?[a-zA-Z_]\w*'
            let g:deoplete#keyword_patterns.tex = '[^\w|\s][a-zA-Z_]\w*'

            let g:deoplete#omni#functions = {}
            let g:deoplete#omni#input_patterns = {}
        endif
    endif
" }

" Key (re)Mappings {
    " nerdtree fix mapping to a toggle
    if isdirectory(expand("~/.vim/bundle/nerdtree/"))
        nnoremap <silent> <leader>ee :NERDTreeToggle<CR>
    endif

    " unite
    if isdirectory(expand("~/.vim/bundle/unite.vim/"))
        " use same keybindings as ctrl-p and buffergator
        nnoremap <silent> <c-p> :Unite -start-insert file<CR>
        nnoremap <silent> <leader>bb :Unite buffer<CR>
    endif

    " disable arrows, insert, delete, home, end, pgup and pgdown keys
    inoremap <Up> <NOP>
    noremap <Up> <NOP>
    inoremap <Down> <NOP>
    noremap <Down> <NOP>
    inoremap <Left> <NOP>
    noremap <Left> <NOP>
    inoremap <Right> <NOP>
    noremap <Right> <NOP>
    inoremap <PageUp> <NOP>
    noremap <PageUp> <NOP>
    inoremap <PageDown> <NOP>
    noremap <PageDown> <NOP>
    inoremap <Insert> <NOP>
    noremap <Insert> <NOP>
    inoremap <Del> <NOP>
    noremap <Del> <NOP>
" }

